"use strict";var isDevBuild=process.argv.indexOf("--env.prod")<0,path=require("path"),webpack=require("webpack"),nodeExternals=require("webpack-node-externals"),merge=require("webpack-merge"),allFilenamesExceptJavaScript=/\.(?!js(\?|$))([^.]+(\?|$))/,sharedConfig={resolve:{extensions:["",".js",".ts"]},output:{filename:"[name].js",publicPath:"/dist/"},module:{loaders:[{test:/\.ts$/,include:/ClientApp/,loader:"ts",query:{silent:!0}},{test:/\.html$/,loader:"raw"},{test:/\.css$/,loader:"to-string!css"},{test:/\.(png|jpg|jpeg|gif|svg)$/,loader:"url",query:{limit:25e3}}]}},clientBundleConfig=merge(sharedConfig,{entry:{"main-client":"./ClientApp/boot-client.ts"},output:{path:path.join(__dirname,"./wwwroot/dist")},devtool:isDevBuild?"inline-source-map":null,plugins:[new webpack.DllReferencePlugin({context:__dirname,manifest:require("./wwwroot/dist/vendor-manifest.json")})].concat(isDevBuild?[]:[new webpack.optimize.OccurenceOrderPlugin,new webpack.optimize.UglifyJsPlugin])}),serverBundleConfig=merge(sharedConfig,{entry:{"main-server":"./ClientApp/boot-server.ts"},output:{libraryTarget:"commonjs",path:path.join(__dirname,"./ClientApp/dist")},target:"node",devtool:"inline-source-map",externals:[nodeExternals({whitelist:[allFilenamesExceptJavaScript]})]});module.exports=[clientBundleConfig,serverBundleConfig];